{"version":3,"sources":["serviceWorker.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","undefined","error","setError","addItem","trimmedTitle","trim","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","todolistID","task","id","className","isDone","Checkbox","checked","changeTaskStatus","removeTask","Todolist","generelOnClickHandler","changeFilter","addTask","changeTodolistTitle","tasks","filter","t","removeTodolist","style","listStyle","padding","map","Button","margin","initialState","v1","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","todolistId","type","removeTaskAC","addTaskAC","taskId","changeTaskStatusAC","changeTaskTitleAC","action","removeTodolistAC","addTodolist","addTodolistAC","changeTodoListFilter","changeTodoListFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","justifyContent","edge","arial-label","Menu","Typography","Container","fixed","Grid","container","spacing","tl","tasksForTodolist","item","Paper","elevation","rootReducer","combineReducers","stateCopy","newTask","newState","newTodolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b3e2e00a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm is called')\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<boolean | undefined>(undefined)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle !== '') {\r\n            props.addItem(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== undefined) {\r\n            setError(undefined)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                size={'small'}\r\n                color={'primary'}\r\n                onClick={addItem}\r\n            >\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n    title: string\r\n    changeTitle:(title:string)=> void\r\n}\r\nexport const EditableSpan = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('EditableSpan')\r\n    const [title, setTitle] = useState(props.title)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => setEditMode(false)\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitleHandler}\r\n                onBlur={offEditMode}\r\n                autoFocus={true}\r\n                />\r\n            : <span onDoubleClick={onEditMode} >{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../EditableSpan/EditableSpan';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {TaskType} from '../../Todolist';\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string,\r\n    removeTask: (todolistID: string, taskId: string) => void,\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void,\r\n    changeTaskTitle: (todolistID: string, taskId: string, title: string) => void,\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.todolistID, props.task.id, title)\r\n    },[props.todolistID, props.task.id, props.changeTaskTitle])\r\n    const onClickHandler = () => props.removeTask(props.todolistID, props.task.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistID, props.task.id, e.currentTarget.checked);\r\n    }\r\n    return <li key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            color={'primary'}\r\n            size={'small'}\r\n            checked={props.task.isDone}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan title={props.task.title} changeTitle={changeTaskTitle}/>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={onClickHandler}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n\r\n    </li>\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan/EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Task} from './components/Task/Task';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    todolistID: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (todolistID: string, title: string) => void\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, title: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTodolistTitle: (todolistID: string, title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('is called Todolist')\r\n    const generelOnClickHandler = useCallback((value: FilterValuesType) => {\r\n        props.changeFilter(props.todolistID, value)\r\n    }, [props.changeFilter, props.todolistID])\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(props.todolistID, title), [props.addTask, props.todolistID])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(props.todolistID, title), [props.changeTodolistTitle, props.todolistID])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n\r\n    return <div className={'titleTodolist'}>\r\n        <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n\r\n            <IconButton\r\n                size={'small'}\r\n                onClick={() => props.removeTodolist(props.todolistID)}>\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: '10'}}>\r\n            {\r\n                props.tasks.map(t => <Task\r\n                        key={t.id}\r\n                        task={t}\r\n                        removeTask={props.removeTask}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        todolistID={props.todolistID}\r\n                    />\r\n                )\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                onClick={() => generelOnClickHandler('all')}>All\r\n            </Button>\r\n            <Button\r\n                style={{margin: '0 3px'}}\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                onClick={() => generelOnClickHandler('active')}>Active\r\n            </Button>\r\n            <Button\r\n                size={'small'}\r\n                variant={'contained'}\r\n                color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                onClick={() => generelOnClickHandler('completed')}>Completed\r\n\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import {FilterValuesType, TodolistsType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AppRootStateType} from './store';\r\n\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistID: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    todolistID: string,\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    todolistID: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n\r\nexport let todolistID1 = v1();\r\nexport let todolistID2 = v1();\r\n\r\nconst initialState: TodolistsType[]  = []\r\n\r\nexport const todolistsReducer = (state: TodolistsType[] = initialState, action: ActionType\r\n):TodolistsType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return [...state.filter(tl => tl.id !== action.todolistID)]\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: TodolistsType = {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }\r\n            return [newTodolist, ...state ]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state\r\n                .map(tl => tl.id === action.todolistID\r\n                    ? {...tl, title: action.title}\r\n                    : tl\r\n                )\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state\r\n                .map(tl => tl.id === action.todolistID\r\n                    ? {...tl, filter: action.filter}\r\n                    : tl\r\n                )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistID: string):RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todolistID: todolistID}\r\n}\r\n\r\nexport const addTodolistAC = (title: string):AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title,  todolistId:v1()}\r\n}\r\n\r\nexport const changeTodolistTitleAC = (todolistID:string, title: string):ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', todolistID: todolistID, title:title}\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todolistID:string, filter: FilterValuesType):ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', todolistID: todolistID, filter: filter}\r\n}","import {idID} from '@material-ui/core/locale';\r\nimport {TasksStateType, TodolistsType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodoListActionType, RemoveTodoListActionType, todolistID1, todolistID2} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    id: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todolistId: string\r\n    id: string\r\n    title: string\r\n}\r\n\r\ntype ActionTypes =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', id, todolistId}\r\n}\r\n\r\nexport const addTaskAC = (todolistId: string, title: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', todolistId, title}\r\n}\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, id: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', todolistId, id, isDone}\r\n}\r\n\r\nexport const changeTaskTitleAC = (todolistId: string, id: string, title: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', todolistId, id, title}\r\n}\r\n\r\nconst initialState: TasksStateType  = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState , action: ActionTypes): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = stateCopy[action.todolistId]\r\n                .filter(t => t.id !== action.id)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [\r\n                    newTask, ...state[action.todolistId]\r\n                ]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.id\r\n                    ? {...t, isDone: action.isDone} : t\r\n                )\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.id\r\n                    ? {...t, title: action.title} : t\r\n                )\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const newState = {...state}\r\n            delete newState[action.todolistID]\r\n            return newState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useCallback, useReducer} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './store/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './store/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store/store';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistsType = { id: string, title: string, filter: FilterValuesType }\r\n\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, TodolistsType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((todolistID: string, id: string)=> {\r\n        dispatch(removeTaskAC(todolistID, id))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistID: string)=> {\r\n        dispatch(addTaskAC(title, todolistID ))\r\n    },[dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistID: string, taskId: string, isDone: boolean)=> {\r\n        dispatch(changeTaskStatusAC(todolistID, taskId, isDone))\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistID: string, taskId: string, title: string) => {\r\n        dispatch(changeTaskTitleAC(todolistID, taskId, title))\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        const action = removeTodolistAC(todolistID)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    },[dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((todolistID: string, filter: FilterValuesType)=> {\r\n        dispatch(changeTodoListFilterAC(todolistID, filter))\r\n    },[dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistID: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(todolistID, title))\r\n    },[dispatch])\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge={'start'} color={'inherit'} arial-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color={'inherit'}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid\r\n                    container\r\n                    style={{padding: '10px 0'}}\r\n                >\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={5}\r\n                >\r\n                    {todolists.map((tl) => {\r\n                        let tasksForTodolist = tasks[tl.id];\r\n\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}\r\n                            >\r\n                                <Paper style={{padding: '10px'}}\r\n                                       elevation={5}\r\n                                >\r\n                                    <Todolist\r\n                                        todolistID={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeTodoListFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from './AppWithReducers';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}